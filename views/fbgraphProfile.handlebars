{{> header}}
	{{> nav}}
	<div class="container">
		<div class="row-fluid">
			<h3> Hello, {{userProfile.displayName}}! You are currently signed in as {{userProfile.username}} on {{userProfile.provider}}! </h3>
		</div>
		<div class="row-fluid">
			<div class="panel panel-default">
				<header class="panel-heading">
					<div class="container">
						<div class="col-lg-1">
							<img src="{{profPic}}" class="img-responsive img-circle">
						</div>
						<div class="col-lg-11">
							<h4>{{userProfile.displayName}} 
								<small>aka {{userProfile.username}}</small>
							</h4>
							<a href="/fbgraph/json">User JSON</a>
							<a href="/fbgraph/testAPI">Test API</a>
						</div>
					</div>
				</header>
				<div class="panel-body">
					<div class="col-lg-12">
						<div class="row">
							<h3> My Bio </h3>
							{{userProfile._json.bio}}
						</div>
						<div class="row">
							<h3> Let's Play a Game! </h3>
							<span>
								You will be shown a random photo you are tagged in.  Can you guess who posted it?
							</span>
							<br/>
							<form>
								<input name="randPic" id="randPic" type="hidden">
								<button class="btn btn-primary" id="randPicBtn" href="#">
									I accept your challenge!
								</button>
							</form>
						</div>
						<div class="row">
							<h3>Known Bugs</h3>
							<p> For some reason, the Facebook photo urls will only render as a 1px x 1px image. (If you don't believe me, check this pages source code after you click the button!).</p>
						</div>
					</div>
				</div>
			</div>
		</div>
		<a href="/fbgraph/friends"> click </a>
		<div class="row-fluid">
			<!-- <a href="/fbgraph/friends">view friends</a> -->
			<div id="myGraph">
				<!-- Populate svg d3 graph here -->
			</div>
		</div>

		<!-- modal collection -->
		<div id="picResult" class="modal fade">
		  <div class="modal-dialog">
		    <div class="modal-content text-center">
		      <div class="modal-header">
		        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		        <h4 id="Title" class="modal-title">Who posted this? <small><span class="green" id="answer"></span></small></h4>
		      </div>
		      <div class="modal-body">
		      	<div class="row">
			      	</i><span>
			      		<a id="error" href="">If you don't see a picture, click here.  It will open in a new tab. </a>
			      	</span></i>
			    </div>
			    <div class="row">
			        <div id="pic-container">
			        	<!-- pic will display here -->
			        	<br/>
			        	<h2><span id="success" class="green"></span></h2>
			        	<span id="load">Loading... <br/> Please wait a moment.</span>
			        	<img src="" class="img-responsive img-rounded">

					</div>
				</div>
				<br/>
				<div class="row">
					<span id="subtitle"></span>
				</div>
				<br/>
				<div class="row">
					<div class="input-group">
				      <input id="guess" type="text" class="form-control">
				      <span class="input-group-btn">
				        <button id="getGuess" class="btn btn-primary" type="button">Submit</button>
				      </span>
				    </div><!-- /input-group -->
				    <span id="incorrect" class="help-block red"></span>
				</div>

		      </div>
		      <div class="modal-footer">
		        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
		      </div>
		    </div><!-- /.modal-content -->
		  </div><!-- /.modal-dialog -->
		</div><!-- /.modal -->
{{> globaljs}}
<script src="../js/game.js"></script>

<script>
// the formatted json
var friendGraph = {};

// width and height  of svg
var width = "100%";
var height = 1000;

// make an ajax request to get friend connections/data

	$.ajax({
			type: 'GET',
			url: '/fbgraph/friends',
			dataType: 'json'
		}).done( function(response) {
			// collect the response and format or d3
			console.log('getting friends');

			var friends = response.data.reduce(function(acc, person) {
				acc[person.id] = person.name;
				return acc;
			});

			var friend_id = Object.keys(friends);

			// map friends and their ids
			console.log('setting up nodes');
			friendGraph.nodes = friend_id.map(function(friend_id) {
				return {
					id: friend_id,
					name: friends[friend_id]
				}
			});

			// get mutual friends
			$.ajax({
				type: 'GET',
					url: '/fbgraph/mutualfriends',
					dataType: 'json'
				}).done( function(response) {

					console.log(response);
					// last ajax call
					console.log('getting mutual friends');

					console.log('setting up edges');
					friendGraph.edges = response.data.map(function(link) {
						return {
							source: friend_id.indexOf(link.uid1),
							target: friend_id.indexOf(link.uid2)
						}
					});

					console.log('friendGraph complete');

					// do the force layout
					console.log('setting up force layout');
					// json is formatted. draw the graph with d3
					var force = d3.layout
								.force()
								.charge(-120)
								.linkDistance(40)
								.nodes(friendGraph.nodes)
								.links(friendGraph.edges)
								// .size([parseInt(d3.select('#myGraph').style('width'), 10),
								// 		parseInt(d3.select('#myGraph').style('height'), 10)]);
								.size([width, height]);

					// svg container for the graph
					console.log('appending svg');
					var friendSVG = d3.select('#myGraph')
										.append('svg')
										.attr('width', width)
    									.attr('height', height);

					// edges for the graph
					console.log('putting edges on svg');
					var edge = friendSVG.selectAll('line.edge')
								.data(friendGraph.edges)
								.enter()
								.append('line')
								.attr('class', 'edge')
								.style('stroke', 'rgba(200, 200, 200, 0.2')
								.style('stroke-width', .6);

					console.log('putting nodes on svg');
					var nodes = friendSVG.selectAll('circle.node')
								.data(friendGraph.nodes)
								.enter()
								.append('circle')
								.attr('class', 'node')
								.attr('r', 5)
								.style('fill', 'blue')
								.style('cursor', 'pointer')
								.call(force.drag);
					console.log(nodes);

					console.log('setting tick');
					force.on('tick', function() {
						nodes.attr('cx', function(d) { return d.x; })
							.attr('cy', function(d) { return d.y; });

						edge.attr('x1', function(d) { return d.source.x; })
							.attr('x2', function(d) { return d.target.x; })
							.attr('y1', function(d) { return d.source.y; })
							.attr('y2', function(d) { return d.target.y; });
					});

					// check for null sources
					var nullsrcs = 0;
					for (var i = 0; i < friendGraph.edges.length; i++) {
						if(friendGraph.edges[i].source === null ||
							friendGraph.edges[i].source === undefined ) {
							nullsrcs++;
						};
					}
					console.log("there are " + nullsrcs + " null sources");
					
					console.log('starting...');
					console.log(friendGraph);
					force.start();
					console.log('done!');

				});
		});

	



</script>

{{> footer}}
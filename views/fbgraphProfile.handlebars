{{> header}}
	{{> nav}}
	<div class="container">
		<div class="row-fluid">
			<h3> Hello, {{userProfile.displayName}}! You are currently signed in as {{userProfile.username}} on {{userProfile.provider}}! </h3>
		</div>
		<div class="row-fluid">
			<div class="panel panel-default">
				<header class="panel-heading">
					<div class="container">
						<div class="col-lg-1">
							<img src="{{profPic}}" class="img-responsive img-circle">
						</div>
						<div class="col-lg-11">
							<h4>{{userProfile.displayName}} 
								<small>aka {{userProfile.username}}</small>
							</h4>
							<a href="/fbgraph/json">User JSON</a>
							<a href="/fbgraph/testAPI">Test API</a>
						</div>
					</div>
				</header>
				<div class="panel-body">
					<div class="col-lg-12">
						<div class="row">
							<h3> My Bio </h3>
							{{userProfile._json.bio}}
						</div>
						<div class="row">
							<h3> Let's Play a Game! </h3>
							<span>
								You will be shown a random photo you are tagged in.  Can you guess who posted it?
							</span>
							<br/>
							<form>
								<input name="randPic" id="randPic" type="hidden">
								<button class="btn btn-primary" id="randPicBtn" href="#">
									I accept your challenge!
								</button>
							</form>
						</div>
						<div class="row">
							<h3>Known Bugs</h3>
							<p> For some reason, the Facebook photo urls will only render as a 1px x 1px image. (If you don't believe me, check this pages source code after you click the button!).</p>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- <a href="/fbgraph/friends"> click </a> -->
		<div class="row-fluid">
			<div id="results">
				<h2><span class="male" id="male"></span></h2>
				<h2><span class="female" id="female"></span></h2>
			</div>
			<!-- <a href="/fbgraph/friends">view friends</a> -->
			<div id="myGraph">
				<!-- Populate svg d3 graph here -->
			</div>
		</div>

		<!-- modal collection -->
		<div id="picResult" class="modal fade">
		  <div class="modal-dialog">
		    <div class="modal-content text-center">
		      <div class="modal-header">
		        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
		        <h4 id="Title" class="modal-title">Who posted this? <small><span class="green" id="answer"></span></small></h4>
		      </div>
		      <div class="modal-body">
		      	<div class="row">
			      	</i><span>
			      		<a id="error" href="">If you don't see a picture, click here.  It will open in a new tab. </a>
			      	</span></i>
			    </div>
			    <div class="row">
			        <div id="pic-container">
			        	<!-- pic will display here -->
			        	<br/>
			        	<h2><span id="success" class="green"></span></h2>
			        	<span id="load">Loading... <br/> Please wait a moment.</span>
			        	<img src="" class="img-responsive img-rounded">

					</div>
				</div>
				<br/>
				<div class="row">
					<span id="subtitle"></span>
				</div>
				<br/>
				<div class="row">
					<div class="input-group">
				      <input id="guess" type="text" class="form-control">
				      <span class="input-group-btn">
				        <button id="getGuess" class="btn btn-primary" type="button">Submit</button>
				      </span>
				    </div><!-- /input-group -->
				    <span id="incorrect" class="help-block red"></span>
				</div>

		      </div>
		      <div class="modal-footer">
		        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
		      </div>
		    </div><!-- /.modal-content -->
		  </div><!-- /.modal-dialog -->
		</div><!-- /.modal -->
{{> globaljs}}
<script src="../js/game.js"></script>
<script src="../js/Donut3D.js"></script>
<!-- <script src="../js/network.js"></script> -->

<script>

$(document).ready(function() {


	// make an ajax call to get friend demographics

	d3.json('/fbgraph/friendDemographics', function(error, response) {
		if (error) return console.warn(error);

		// set the data of the arcs
		console.log(response);

		var data = [];

		data[0] = response.male;
		data[1] = response.female;

		// arc chart variables

		var radius = 300;							// radius for the chart

		var color = d3.scale.ordinal()
					.range(["#2980b9", "#c0392b"]); // color scale

		var canvas = d3.select('#myGraph').append('svg')
					.attr('width', '80%')
					.attr('height', 1000);			// svg canvas

		var group = canvas.append('g')
					.attr('transform', 'translate(400,400)');	// group container

		var arc = d3.svg.arc() 
					.innerRadius(200)
					.outerRadius(radius);			// complete pie chart arc

		var pie = d3.layout.pie()
					.value(function (d) { return d; });	// piechart layout

		var arcs = 	group.selectAll('.arc')
					.data(pie(data))
					.enter()
					.append('g')
					.attr('class', 'arc');		// appending arcs

		arcs.append('path')
			.attr('d', arc)
			.attr('fill', function(d) { return color(d.data); });

		arcs.append('text')
			.attr('transform', function(d) { return 'translate(' + arc.centroid(d) + ')'; })
			.attr('text-anchor', 'middle')
			.attr('font-size', '2em')
			.text(function (d) {return d.data;})
			.attr('fill', '#fff');

		// display the resuts
		var maleString = 'You have ';
			maleString += response.male;
			maleString += ' male friends.';

		var femaleString = 'You have ';
			femaleString += response.female;
			femaleString += ' female friends.';

		$('#male').text(maleString);
		$('#female').text(femaleString);


	});


});

d3.json('/fbgraph/friendDemographics', function(error, response) {
		if (error) return console.warn(error);

		// set the data of the arcs
		console.log(response);

		var data = [];

		data[0] = response.male;
		data[1] = response.female;


		//Values for boys and girls. Would be taken from JSON
var boys = 700;

var girls = 300;

//Values for relationships. Would be taken from JSON
var single = 100;
var inARelationship = 200;
var married = 300;
var unknown = 400;

//Fields used to set the information needed for the gender graph

var genderData=[
	{label:"Boys", color:"#3366CC", value:response.male},
	{label:"Girls", color:"#DC3912", value:response.female},
];	

//Fields used to set the information needed for the relationship graph
var relationshipData=[
	{label:"Single", color:"#FF9900", value:single},
	{label:"In a Relationship", color:"#109618", value:inARelationship},
	{label:"Married", color:"#990099", value:married},
	{label:"Unknow", color:"#FF00FF", value:unknown}
];

//Default graph. Used to transition to genderData
var defaultGenderData=[
	{label:"Boys", color:"#3366CC", value:50},
	{label:"Girls", color:"#DC3912", value:50},
];	

//Default graph. Used to transition to relationshipData.
var defaultRelationshipData=[
	{label:"Single", color:"#FF9900", value:50},
	{label:"In a Relationship", color:"#109618", value:50},
	{label:"Married", color:"#990099", value:50},
	{label:"Unknow", color:"#FF00FF", value:50}
];


var svg = d3.select("body").append("svg").attr("width",700).attr("height",300);

svg.append("g").attr("id","genderDonut");
svg.append("g").attr("id","relationshipDonut");

							//150,150 centers the ring at those coordinates
							//130, 100 are the x-length and y-height of the graph
							//30 is the height of the chart (shadowed area)
							//0.4 is inner radius
//Draws gender data chart 			
Donut3D.draw("genderDonut", defaultGenData(), 150, 150, 130, 100, 30, 0.4);
Donut3D.draw("relationshipDonut", defaultRelationData(), 450, 150, 130, 100, 30, 0);

//Transitions between gender and relationship fields
function changeData(){
	Donut3D.transition("genderDonut", genData(), 130, 100, 30, 0.4);
	Donut3D.transition("relationshipDonut", relationData(), 130, 100, 30, 0);

}



//Sets the data onto the pie chart using values from genderData
function genData(){
	return genderData.map(function(d){ 
		return {label:d.label, value:d.value, color:d.color};});
}

//Sets the data onto the pie chart using values from relationshipData
function relationData(){
	return relationshipData.map(function(d){ 
		return {label:d.label, value:d.value, color:d.color};});
}

//Uses default gender info. for transitioning purposes
function defaultGenData(){
	return defaultGenderData.map(function(d){ 
		return {label:d.label, value:d.value, color:d.color};});
}

//Uses default relationship info. for transitioning purposes
function defaultRelationData(){
	return defaultRelationshipData.map(function(d){ 
		return {label:d.label, value:d.value, color:d.color};});
}
	
//Beginning of legend material
	var w = 500;
    var h = 300;  
    
    //4 entries for the relationship graph
    var dataset = [
        [],[],[],[]
    ];

    //2 entries for the gender graph
    var dataset2 = [
        [],[]
    ];

	var color_gender = {  0 : ["Males", "#3366CC"],
					    1 : ["Females", "#DC3912"],
					  } 

    var color_relationships = {  0 : ["Single", "#FF9900"],
					    1 : ["In A Relationship", "#109618"],
					    2 : ["Married", "#990099"],
					    3 : ["Unknown", "#FF00FF"]
					  }                     

	// Create SVG element
	var svg = d3.select("body")
	    .append("svg")
	    .attr("width", w)
	    .attr("height", h);



	//Relationship
	var legendRelationships = svg.append("g")
	  .attr("class", "legend")
	  .attr("x", w - 65)
	  .attr("y", 25)
	  .attr("height", 100)
	  .attr("width", 300);

	var legendGender = svg.append("g")
	  .attr("class", "legend")
	  .attr("x", w)
	  .attr("y", 25)
	  .attr("height", 100)
	  .attr("width", 300);  

	legendRelationships.selectAll('g').data(dataset)
      .enter()
      .append('g')
      .each(function(d, i) {
        var g = d3.select(this);
        g.append("rect")
          .attr("x", w - 125)
          .attr("y", i*25 + 4)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", color_relationships[String(i)][1]);
        
        g.append("text")
          .attr("x", w - 110)
          .attr("y", i * 25 + 15)
          .attr("height",30)
          .attr("width",300)
          .style("fill", color_relationships[String(i)][1])
          .text(color_relationships[String(i)][0]);


      });

      //Gender Legend
      legendGender.selectAll('g').data(dataset2)
      .enter()
      .append('g')
      .each(function(d, i) {
        var g = d3.select(this);
        g.append("rect")
          .attr("x", w - 400)
          .attr("y", i*25 + 4)
          .attr("width", 10)
          .attr("height", 10)
          .style("fill", color_gender[String(i)][1]);
        
        g.append("text")
          .attr("x", w - 385)
          .attr("y", i * 25 + 15)
          .attr("height",30)
          .attr("width",300)
          .style("fill", color_gender[String(i)][1])
          .text(color_gender[String(i)][0]);
      });


});

</script>

{{> footer}}